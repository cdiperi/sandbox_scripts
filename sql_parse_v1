import re
import pandas as pd

# Function to Remove Multi-line Comments
def remove_multiline_comments(sql):
    pattern = r'/\*.*?\*/'
    no_comments_sql = re.sub(pattern, '', sql, flags=re.DOTALL)
    return no_comments_sql.strip()

# Function to Extract SQL Parts (as you provided)
def extract_sql_parts_v6(sql):
    pattern = r'\((\s*SELECT[^)]+)\)'
    matches = re.findall(pattern, sql, re.IGNORECASE)
    modified_sql = sql
    for match in matches:
        modified_sql = modified_sql.replace(f"({match})", 'PLACEHOLDER', 1)
    modified_sql = re.sub(r'WITH[^;]+\s+AS\s+', '', modified_sql, flags=re.IGNORECASE)
    modified_sql = re.sub(r'\s+AS\s+[^,)]+\s+ON', ' ON', modified_sql, flags=re.IGNORECASE)
    remaining_parts = [part.strip() for part in modified_sql.split('PLACEHOLDER') if part.strip()]
    remaining_string = ' '.join(remaining_parts).replace('\n', ' ').strip()
    return [match.strip() for match in matches] + [remaining_string]

# Improved Function to Extract Table and Column Info
def extract_table_columns_improved(sql_part):
    table_pattern = r'(?i)([a-zA-Z_]\w*)\.([a-zA-Z_]\w*)'
    tables = re.findall(table_pattern, sql_part)
    results = []
    sections = re.split(r'FROM|JOIN', sql_part, flags=re.IGNORECASE)
    for idx, section in enumerate(sections[:-1]):
        next_section = sections[idx+1]
        next_table_match = re.search(table_pattern, next_section)
        column_pattern = r'(?i)([a-zA-Z_]\w*)'
        columns = re.findall(column_pattern, section)
        non_column_keywords = ["select", "max", "nvl", "as", "on", "and", "or", "in", "like", "between", "not", "is", "null", "from", "where", "group", "by", "order", "having", "join", "left", "right", "inner", "outer", "distinct", "all"]
        columns = [col for col in columns if col.lower() not in non_column_keywords]
        if next_table_match:
            current_schema, current_table = next_table_match.groups()
            for column in columns:
                results.append({
                    "schema_name": current_schema,
                    "table_name": current_table,
                    "column_name": column
                })
    return results

# Main Execution
cleaned_sql_query = remove_multiline_comments(sql_query)
sql_parts = extract_sql_parts_v6(cleaned_sql_query)
table_column_info_improved = []
for part in sql_parts:
    table_column_info_improved.extend(extract_table_columns_improved(part))
unique_table_column_info_improved = [dict(t) for t in {tuple(d.items()) for d in table_column_info_improved}]
df_output_improved = pd.DataFrame(unique_table_column_info_improved)
