import re
import pandas as pd

# Function to Remove Custom and Multi-line Comments
def remove_custom_and_multiline_comments(sql):
    # Remove custom pattern ] } } */
    custom_pattern = r'.*?\]\s*}\s*}\s*\*/'
    sql = re.sub(custom_pattern, '', sql, flags=re.DOTALL)
    
    # Remove multi-line comments
    multiline_pattern = r'/\*.*?\*/'
    sql = re.sub(multiline_pattern, '', sql, flags=re.DOTALL)
    
    return sql.strip()

# Function to Extract SQL Parts
def extract_sql_parts(sql):
    pattern = r'\((\s*SELECT[^)]+)\)'
    matches = re.findall(pattern, sql, re.IGNORECASE)
    modified_sql = sql
    for match in matches:
        modified_sql = modified_sql.replace(f"({match})", 'PLACEHOLDER', 1)
    modified_sql = re.sub(r'WITH[^;]+\s+AS\s+', '', modified_sql, flags=re.IGNORECASE)
    modified_sql = re.sub(r'\s+AS\s+[^,)]+\s+ON', ' ON', modified_sql, flags=re.IGNORECASE)
    remaining_parts = [part.strip() for part in modified_sql.split('PLACEHOLDER') if part.strip()]
    remaining_string = ' '.join(remaining_parts).replace('\n', ' ').strip()
    return [match.strip() for match in matches] + [remaining_string]

# Function to Extract Table and Column Info
def extract_table_columns_finalized(sql_part):
    table_pattern = r'(?i)([a-zA-Z_]\w*)\.([a-zA-Z_]\w*)'
    tables = re.findall(table_pattern, sql_part)
    results = []

    non_column_keywords = ["select", "max", "nvl", "as", "on", "and", "or", "in", "like", "between", "not", "is", "null", "from", "where", "group", "by", "order", "having", "join", "left", "right", "inner", "outer", "distinct", "all"]

    # Extract potential columns from the SELECT section
    select_section_pattern = r'(?i)SELECT(.*?)FROM'
    select_section_match = re.search(select_section_pattern, sql_part)
    
    if select_section_match:
        select_section = select_section_match.group(1)
        column_pattern = r'(?i)([a-zA-Z_]\w*)'
        columns = re.findall(column_pattern, select_section)
        columns = [col for col in columns if col.lower() not in non_column_keywords]
        if tables:
            schema, table = tables[0]
            for column in columns:
                results.append({
                    "schema_name": schema,
                    "table_name": table,
                    "column_name": column
                })

    # Extract potential columns from the rest of the SQL part (excluding the SELECT section)
    rest_of_sql = sql_part[select_section_match.end():] if select_section_match else sql_part
    column_pattern = r'(?i)([a-zA-Z_]\w*)'
    columns = re.findall(column_pattern, rest_of_sql)
    columns = [col for col in columns if col.lower() not in non_column_keywords]
    
    if tables:
        schema, table = tables[-1]
        for column in columns:
            results.append({
                "schema_name": schema,
                "table_name": table,
                "column_name": column
            })

    return results
