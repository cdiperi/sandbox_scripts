import re
import pandas as pd

# Function to Remove Multi-line Comments
def remove_comments(sql):
    pattern = r'/\*.*?\*/'
    no_comments_sql = re.sub(pattern, '', sql, flags=re.DOTALL)
    return no_comments_sql.strip()

# Function to Extract SQL Parts
def extract_sql_parts(sql):
    pattern = r'\((\s*SELECT[^)]+)\)'
    matches = re.findall(pattern, sql, re.IGNORECASE)
    modified_sql = sql
    for match in matches:
        modified_sql = modified_sql.replace(f"({match})", 'PLACEHOLDER', 1)
    modified_sql = re.sub(r'WITH[^;]+\s+AS\s+', '', modified_sql, flags=re.IGNORECASE)
    modified_sql = re.sub(r'\s+AS\s+[^,)]+\s+ON', ' ON', modified_sql, flags=re.IGNORECASE)
    remaining_parts = [part.strip() for part in modified_sql.split('PLACEHOLDER') if part.strip()]
    remaining_string = ' '.join(remaining_parts).replace('\n', ' ').strip()
    return [match.strip() for match in matches] + [remaining_string]

# Function to Extract Table and Column Info
def extract_table_columns(sql_part):
    table_pattern = r'(?i)([a-zA-Z_]\w*)\.([a-zA-Z_]\w*)'
    tables = re.findall(table_pattern, sql_part)
    results = []
    sections = re.split(r'FROM|JOIN', sql_part, flags=re.IGNORECASE)
    for idx, (schema, table) in enumerate(tables):
        section = sections[idx+1] if idx+1 < len(sections) else sections[-1]
        column_pattern = r'(?i)([a-zA-Z_]\w*)'
        columns = re.findall(column_pattern, section)
        non_column_keywords = ["select", "max", "nvl", "as", "on", "and", "or", "in", "like", "between", "not", "is", "null", "from", "where", "group", "by", "order", "having", "join", "left", "right", "inner", "outer", "distinct", "all"]
        columns = [col for col in columns if col.lower() not in non_column_keywords]
        for column in columns:
            results.append({
                "schema_name": schema,
                "table_name": table,
                "column_name": column
            })
    return results

# Main Execution
clean_sql = remove_comments(sql_query)
sql_parts_list = extract_sql_parts(clean_sql)
table_column_info_list = []
for part in sql_parts_list:
    table_column_info_list.extend(extract_table_columns(part))
unique_table_column_info = [dict(t) for t in {tuple(d.items()) for d in table_column_info_list}]
df_output = pd.DataFrame(unique_table_column_info)
