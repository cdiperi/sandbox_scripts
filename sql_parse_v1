import re
import pandas as pd
from typing import List, Dict, Union

def remove_custom_and_multiline_comments(sql: str) -> str:
    """
    Remove custom and multi-line comments from the given SQL string.

    Args:
    - sql (str): The SQL query string.

    Returns:
    - str: The SQL string without custom and multi-line comments.
    """
    # Remove custom pattern ] } } */
    custom_pattern = r'.*?\]\s*}\s*}\s*\*/'
    sql = re.sub(custom_pattern, '', sql, flags=re.DOTALL)
    
    # Remove multi-line comments
    multiline_pattern = r'/\*.*?\*/'
    sql = re.sub(multiline_pattern, '', sql, flags=re.DOTALL)
    
    return sql.strip()

def extract_sql_parts(sql: str) -> List[str]:
    """
    Extract different parts of the SQL query, especially nested sub-queries.

    Args:
    - sql (str): The SQL query string.

    Returns:
    - List[str]: List of extracted SQL parts.
    """
    pattern = r'\((\s*SELECT[^)]+)\)'
    matches = re.findall(pattern, sql, re.IGNORECASE)
    modified_sql = sql
    for match in matches:
        modified_sql = modified_sql.replace(f"({match})", 'PLACEHOLDER', 1)
    
    # Remove WITH clause
    modified_sql = re.sub(r'WITH[^;]+\s+AS\s+', '', modified_sql, flags=re.IGNORECASE)
    # Remove aliasing in JOINs
    modified_sql = re.sub(r'\s+AS\s+[^,)]+\s+ON', ' ON', modified_sql, flags=re.IGNORECASE)
    remaining_parts = [part.strip() for part in modified_sql.split('PLACEHOLDER') if part.strip()]
    remaining_string = ' '.join(remaining_parts).replace('\n', ' ').strip()
    return [match.strip() for match in matches] + [remaining_string]

def extract_table_columns_revised(sql_part: str) -> List[Dict[str, str]]:
    """
    Extract table and column information from a SQL part.

    Args:
    - sql_part (str): A part of the SQL query string.

    Returns:
    - List[Dict[str, str]]: List of dictionaries containing table schema, table, and column information.
    """
    table_pattern = r'(?i)([a-zA-Z_]\w*)\.([a-zA-Z_]\w*)'
    tables = re.findall(table_pattern, sql_part)
    results = []

    non_column_keywords = ["select", "max", "nvl", "as", "on", "and", "or", "in", "like", "between", "not", "is", "null", "from", "where", "group", "by", "order", "having", "join", "left", "right", "inner", "outer", "distinct", "all"]

    # Extract potential columns from the SELECT section
    select_section_pattern = r'(?i)SELECT(.*?)FROM'
    select_section_match = re.search(select_section_pattern, sql_part)
    if select_section_match:
        select_section = select_section_match.group(1)
        column_pattern = r'(?i)([a-zA-Z_]\w*)'
        columns = re.findall(column_pattern, select_section)
        columns = [col for col in columns if col.lower() not in non_column_keywords]
        if tables:
            table_schema, table = tables[0]
            for column in columns:
                results.append({
                    "table_schema": table_schema,
                    "table_name": table,
                    "column_name": column
                })

    # Extract potential columns from the rest of the SQL part (excluding the SELECT section)
    rest_of_sql = sql_part[select_section_match.end():] if select_section_match else sql_part
    column_pattern = r'(?i)([a-zA-Z_]\w*)'
    columns = re.findall(column_pattern, rest_of_sql)
    columns = [col for col in columns if col.lower() not in non_column_keywords]
    if tables:
        table_schema, table = tables[-1]
        for column in columns:
            results.append({
                "table_schema": table_schema,
                "table_name": table,
                "column_name": column
            })

    return results

# Assuming the SQL query is stored in the variable 'sql_query'
clean_sql = remove_custom_and_multiline_comments(sql_query)
sql_parts_list = extract_sql_parts(clean_sql)
table_column_info_list = []
for part in sql_parts_list:
    table_column_info_list.extend(extract_table_columns_revised(part))
unique_table_column_info = [dict(t) for t in {tuple(d.items()) for d in table_column_info_list}]
usage_df = pd.DataFrame(unique_table_column_info)
